version: '2.1'

services:
  kong-database:
    restart: on-failure:5
    image: postgres:9.6.11-alpine
    user: kong
    pids_limit: 100
    read_only: true
    container_name: kong-database
    volumes:
      - kong_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
    security_opt:
      - apparmor:docker-default
      - no-new-privileges:true      
    healthcheck:
      test: pg_isready -U kong && psql -d kong -U kong -c "SELECT 1=1"
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migration:
    restart: on-failure:5  
    image: kong:2.0.0
    user: kong
    pids_limit: 100
    read_only: true
    container_name: kong-migration
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
    command: sh -c "(kong migrations up || kong migrations bootstrap) && sleep 30"
    security_opt:
      - apparmor:docker-default
      - no-new-privileges:true           
    healthcheck:
      test: "ip add"
      interval: 10s
      timeout: 5s
      retries: 5

  kong:
    restart: on-failure:5  
    image: kong:2.0.0
    pids_limit: 100
    read_only: true
    container_name: kong
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_LOG_LEVEL: debug
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      # ssl config
      KONG_SSL_CERT: /certs/server.crt
      KONG_SSL_CERT_KEY: /certs/server.key
      KONG_ADMIN_SSL_CERT: /certs/server.crt
      KONG_ADMIN_SSL_CERT_KEY: /certs/server.key
      KONG_SSL: "on"
    ports:
      - "192.168.0.0:8000:8000"
      - "192.168.0.0:8001:8001"       # Remove this after secure ADMIN API
      - "192.168.0.0:8443:8443"
    user: kong      
    volumes:
      - ./cert:/certs
    security_opt:
      - apparmor:docker-default 
      - no-new-privileges:true      
    healthcheck:
      test: kong health
      interval: 10s
      timeout: 5s
      retries: 5

  konga-database:
    restart: on-failure:5  
    image: mongo:4.1.5
    pids_limit: 100
    read_only: true    
    container_name: konga-database
    volumes:
      - konga_data:/data/db
    ports:
      - "192.168.0.0:27017:27017"
    user: kong
    security_opt:
      - apparmor:docker-default
      - no-new-privileges:true      
    healthcheck:
      test: echo 'db.stats().ok' | mongo localhost:27017/konga --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  konga:
    build: ./konga
    container_name: konga
    pids_limit: 100
    depends_on:
      konga-database:
        condition: service_healthy
    volumes:
      - ./konga/user_seed.js:/app/user_seed.js:ro
    ports:
      - "192.168.0.0:1337:1337"
    user: kong
    environment:
      DB_ADAPTER: mongo
      DB_DATABASE: konga
      DB_HOST: konga-database
      KONGA_SEED_USER_DATA_SOURCE_FILE: /app/user_seed.js
      NODE_ENV: production
    security_opt:
      - apparmor:docker-default
      - no-new-privileges:true      
    restart: on-failure:5
          
  filebeat:
    image: docker.elastic.co/beats/filebeat:7.6.2
    pids_limit: 100
    container_name: filebeat
    user: root
    volumes:
        - ${PWD}/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
        - /var/lib/docker:/var/lib/docker:ro
        - /var/run/docker.sock:/var/run/docker.sock:ro
volumes:
  kong_data:
  konga_data:
